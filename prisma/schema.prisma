// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id      Int      @id @default(autoincrement())
  email     String  @unique
  username String  @unique
  password String
  bio      String?
  avatar   String?
  email_verified Boolean   @default(false)
  name           String

  key            Key[]
  auth_session   Session[]

  EmailVerificationToken EmailVerificationToken[]
  PasswordResetToken     PasswordResetToken[]

  followers         FollowingConnection[]           @relation("followers")
  following         FollowingConnection[]           @relation("following")
  posts             Post[]
  comments          Comment[]
  likes             Like[]
}


model Session {
  id             String @id @unique
  user_id        Int
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         Int
  user            User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model EmailVerificationToken {
  id      String @id @unique
  user_id Int
  expires BigInt
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model PasswordResetToken {
  id      String @id @unique
  user_id Int
  expires BigInt
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Post {
  id        Int      @id @default(autoincrement()) @unique
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int      @unique

  comments          Comment[]  
  likes             Like[]
}

model Comment {
  id        Int      @id @default(autoincrement()) @unique
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int      @unique
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int      @unique
}

model Like {
  id        Int      @id @default(autoincrement()) @unique
  userId    Int      @unique
  postId    Int      @unique
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum FollowType {
  PUBLIC
  PRIVATE
}

model FollowingConnection {
  from    User   @relation("followers",fields: [followerId], references: [id])
  followerId Int    @unique
  to      User   @relation("following",fields: [followingId], references: [id])
  followingId Int    @unique
  type    FollowType  @default(PUBLIC)
}
