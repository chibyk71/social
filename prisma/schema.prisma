// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id      String    @id @unique
  email   String  @unique
  username String  @unique
  bio      String?
  avatar   String @default("user-avatar.svg")
  email_verified Boolean   @default(false)
  name           String

  conversations Chat[] @relation("chatParticipant")
  messages Messages[]

  key            Key[]
  auth_session   Session[]

  EmailVerificationToken EmailVerificationToken[]
  PasswordResetToken     PasswordResetToken[]

  followers         FollowingConnection[]           @relation("followers")
  following         FollowingConnection[]           @relation("following")
  posts             Post[]
  comments          Comment[]
  likes             Like[]
  replies           Reply[]
  replyLiikes       ReplyLike[]
  commentLikes      CommentLike[]
}


model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model EmailVerificationToken {
  id      String @id @unique
  user_id String
  expires BigInt
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model PasswordResetToken {
  id      String @id @unique
  user_id String
  expires BigInt
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Post {
  id        BigInt      @id @default(autoincrement()) @unique
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String

  @@index([authorId])
  @@index([id])
  comments          Comment[]  
  likes             Like[]
  medias   Media[]
}

model Media {
  id BigInt @id @default(autoincrement())
  postId BigInt
  post Post @relation(fields: [postId],references: [id])

  content String

  size Int
  type String

  @@index([postId])
}

model Comment {
  id        BigInt      @id @default(autoincrement()) @unique
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    BigInt      @unique

  replies   Reply[]
  likes     CommentLike[]


  @@index([postId])
  @@index([authorId])
}

model Reply {
  id        BigInt      @id @default(autoincrement()) @unique
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  comment      Comment     @relation(fields: [commentId], references: [id])
  commentId    BigInt      @unique

  likes      ReplyLike[]

  @@index([commentId])
  @@index([authorId])
}

model Like {
  id        BigInt      @id @default(autoincrement()) @unique
  userId    String
  postId    BigInt      @unique
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([postId])
}

model CommentLike {
  id        BigInt      @id @default(autoincrement()) @unique
  userId    String
  commentId    BigInt      @unique
  post      Comment     @relation(fields: [commentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([commentId])

}

model ReplyLike {
  id        BigInt      @id @default(autoincrement()) @unique
  userId    String
  replyId    BigInt      @unique
  post      Reply     @relation(fields: [replyId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([replyId])
}

enum FollowType {
  PUBLIC
  PRIVATE
}

model FollowingConnection {
  id      BigInt  @id @default(autoincrement())
  // the person that is following
  from    User   @relation("followers",fields: [followerId], references: [id])
  followerId String
  // the person that is being followed
  to      User   @relation("following",fields: [followingId], references: [id])
  followingId String
  type    FollowType  @default(PUBLIC)

  @@index([followerId])
  @@index([followingId])
}

model Chat {
  id BigInt @id @default(autoincrement())
  participate User[] @relation("chatParticipant")
  messages    Messages[]
}

model Messages {
  id BigInt @id @default(autoincrement()) @unique
  content  String
  createdAt DateTime @default(now())
  sender User @relation(fields: [senderId],references: [id])
  senderId String

  chatId BigInt
  chat   Chat @relation(fields: [chatId],references: [id])

  @@index([chatId])
  @@index([senderId])
  @@index([createdAt])
}